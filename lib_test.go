package speyl

import (
	"math"
	"testing"

	"github.com/Descent098/speyl/algorithms"
)

// Allows you to compare 2 floats to a set precision
// Generated by google AI Overview
func compareFloat(f1, f2 float64, precision int) bool {
	tolerance := math.Pow(10, float64(-precision))
	// fmt.Printf("compareFloat(%f, %f, %d): %f < %f\n", f1, f2, precision, math.Abs(f1-f2), tolerance)
	return math.Abs(f1-f2) < tolerance
}

func TestSuggestWord(t *testing.T) {
	type testCase struct {
		word           string
		validWords     []string
		expectedResult algorithms.Suggestion
	}
	cases := []testCase{
		{
			"alumni",
			[]string{"hi", "hello", "bonjour", "alumni"},
			algorithms.Suggestion{Likelihood: 1.0, Word: "alumni"},
		},
		{
			"almni",
			[]string{"hi", "hello", "bonjour", "alumni"},
			algorithms.Suggestion{Likelihood: 0.944, Word: "alumni"},
		},
		//TODO: add more cases
	}

	for _, currentCase := range cases {

		synchronusResult := algorithms.SuggestWord(currentCase.word, currentCase.validWords, algorithms.JaroSimilarity)
		asynchronusResult := SuggestWord(currentCase.word, currentCase.validWords)
		if asynchronusResult.Word != synchronusResult.Word {
			t.Errorf("SuggestWord(%s) async and sync versions differed in suggested word: %s != %s", currentCase.word, synchronusResult.Word, asynchronusResult.Word)
		}
		if asynchronusResult.Likelihood != synchronusResult.Likelihood {
			t.Errorf("SuggestWord(%s) async and sync versions differed in likelihood's: %.3f != %.3f", currentCase.word, synchronusResult.Likelihood, asynchronusResult.Likelihood)
		}
		if !compareFloat(float64(asynchronusResult.Likelihood), float64(currentCase.expectedResult.Likelihood), 3) {

			t.Errorf("SuggestWord(%s) got incorrect value expected:%.3f \n\tGot %.3f", currentCase.word, currentCase.expectedResult.Likelihood, asynchronusResult.Likelihood)
		}

	}
}
